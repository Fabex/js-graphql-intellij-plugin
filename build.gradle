plugins {
    id 'org.jetbrains.grammarkit' version '2021.1.3'
    id 'org.jetbrains.intellij' version '1.1.3'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
    id 'org.jetbrains.changelog' version '1.2.0'
}

group pluginGroup
version pluginVersion

apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'java'
apply plugin: 'org.jetbrains.changelog'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.atlassian.commonmark:commonmark:0.12.1'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.21'
    implementation 'fr.opensagres.js:minimatch.java:1.1.0'
    implementation 'io.github.cdimascio:dotenv-kotlin:6.2.2'

    implementation 'org.antlr:antlr4-runtime:4.8'
    implementation 'com.graphql-java:java-dataloader:2.2.3'
    implementation 'org.reactivestreams:reactive-streams:1.0.2'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

intellij {
    version = platformVersion
    type = platformType
    plugins = ['JavaScriptLanguage', 'CSS', 'IntelliLang', 'java']
    ideaDependencyCachePath = project.buildDir.absolutePath

    patchPluginXml {
        version = pluginVersion
        sinceBuild = pluginSinceBuild
        untilBuild = pluginUntilBuild

        changeNotes = """
            <p><b>New in $pluginVersion</b></p>
            <p>
            ${changelog.get(pluginVersion.toString().split("-")[0]).toHTML()}
            </p>
            <br />
            <p>See the <a href="https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/blob/master/CHANGELOG.md">CHANGELOG</a> for more details and history.</p>
        """.stripIndent()
    }
}

runPluginVerifier {
    ideVersions = ['IU-2020.3.1', 'IU-2020.3.4']
}

runIde {
    jvmArgs '-Xmx2G'
}

buildSearchableOptions {
    // workaround for https://youtrack.jetbrains.com/issue/JBR-1550
    jbrVersion = '11_0_2b159'
}

sourceSets {

    main.java.srcDirs = ['src/main', 'gen']
    main.resources.srcDir 'resources'

    test.java.srcDirs = ['src/test']
    test.resources.srcDir 'test-resources'

}

apply plugin: 'org.jetbrains.grammarkit'

// import is optional to make task creation easier

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

// GraphQL Parser and Lexer
task generateGraphQLLexer(type: GenerateLexer) {
    source 'src/grammars/GraphQLLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/'
    targetClass 'GraphQLLexer'
    purgeOldFiles = true
}

task generateGraphQLParser(type: GenerateParser) {
    source 'src/grammars/GraphQLParser.bnf'
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/GraphQLParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/psi'
}

// GraphQL Endpoint Parser and Lexer
task generateGraphQLEndpointLexer(type: GenerateLexer) {
    source 'src/grammars/JSGraphQLEndpointLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/endpoint/lexer/'
    targetClass 'JSGraphQLEndpointLexer'
    purgeOldFiles = true
}

task generateGraphQLEndpointParser(type: GenerateParser) {
    source 'src/grammars/JSGraphQLEndpointParser.bnf'
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/endpoint/parser/JSGraphQLEndpointParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/endpoint/psi'
}


// GraphQL Endpoint Doc Parser and Lexer
task generateGraphQLEndpointDocLexer(type: GenerateLexer) {
    source 'src/grammars/JSGraphQLEndpointDocLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/endpoint/doc/lexer/'
    targetClass 'JSGraphQLEndpointDocLexer'
    purgeOldFiles = true
}

task generateGraphQLEndpointDocParser(type: GenerateParser) {
    source 'src/grammars/JSGraphQLEndpointDocParser.bnf'
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/endpoint/doc/JSGraphQLEndpointDocParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/endpoint/doc/psi'
}

compileJava {
    dependsOn generateGraphQLEndpointLexer
    dependsOn generateGraphQLEndpointParser
    dependsOn generateGraphQLEndpointDocLexer
    dependsOn generateGraphQLEndpointDocParser
    dependsOn generateGraphQLLexer
    dependsOn generateGraphQLParser
}

compileJava.options.encoding = 'UTF-8'
